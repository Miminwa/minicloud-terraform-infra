name: Deploy to AWS with Terraform

on:
  push:
    branches:
      - main
permissions:
    contents: write
    id-token: write
jobs:
  deploy-iac:
    runs-on: terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout repository.
        uses: actions/checkout@v2

      - name: Setup GitHub OIDC
        run: | 
           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           unzip awscliv2.zip
           sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update


      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            # Removed role-to-assume as requested
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}



      - name: 'Install tfsec for security scanning'
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.11/tfsec-linux-amd64
          chmod +x tfsec
          ./tfsec --version

      - name: 'Terraform Init'
        run: terraform init

      - name: 'Terraform Format'
        run: terraform fmt

      - name: 'Terraform Validate'
        run: terraform validate


      - name: 'tfsec Security Scan.'
        run: ./tfsec . || true

      - name: Terraform Plan
        run: terraform plan 

      - name: Terraform Apply.
        run: terraform apply -auto-approve 

      - name: 'install kubectl'
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: 'authenticate to EKS Cluster'
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: 'Install helm'
        run: |
                 curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
                 chmod 700 get_helm.sh ./get_helm.sh
      - name: 'Create Datadog API key secret'
        run: |
          kubectl create secret generic datadog-secret --from-literal api-key=${{ secrets.DD_API_KEY }}
 
      - name: 'create datadog-values.yaml'
        run: |
          echo "datadog:" > module-eks/datadog-values.yaml
          echo "  site: \"datadoghq.com\"" >> module-eks/datadog-values.yaml
          echo "  apiKeyExistingSecret: \"datadog-secret\"" >> module-eks/datadog-values.yaml
          echo "  apm:" >> module-eks/datadog-values.yaml
          echo "    enabled: true" >> module-eks/datadog-values.yaml
          echo "  processAgent:" >> module-eks/datadog-values.yaml
          echo "    enabled: true" >> module-eks/datadog-values.yaml
          echo "  logs:" >> module-eks/datadog-values.yaml
          echo "    enabled: true" >> module-eks/datadog-values.yaml
          echo "    containerCollectAll: true" >> module-eks/datadog-values.yaml
          echo "  kubeStateMetrics:" >> module-eks/datadog-values.yaml
          echo "    enabled: true" >> module-eks/datadog-values.yaml
          echo "  clusterAgent:" >> module-eks/datadog-values.yaml
          echo "    enabled: true" >> module-eks/datadog-values.yaml
          echo "  rbac:" >> module-eks/datadog-values.yaml
          echo "    create: true" >> module-eks/datadog-values.yaml
          echo "    serviceAccountName: datadog-agent" >> module-eks/datadog-values.yaml

      -  name: 'Install Datadog Agent in EKS'
         run: |
           helm repo add datadog https://helm.datadoghq.com
           helm repo update
           helm install datadog-agent -f datadog-values.yaml datadog/datadog


      - name: 'Deploying the ClusterIssuer to EKS'
        run: kubectl apply -f ClusterIssuer.yaml

      - name: 'Deploying argocd ingress rule to EKS'
        run: kubectl apply -f ingress-argocd.yaml -n argocd

      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve